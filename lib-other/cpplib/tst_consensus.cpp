/*
 * Consensus Mechanism
 * This is the mechanism that, theoretically,
 *   1] allows the software to determine the state of Decisions truthfully, and
 *   2] only allows an efficient number of most-traded-upon-Decisions.
 */
#include <stdint.h>
#include <stdio.h>
#include "tc_matrix.h"

int main(int argc, char **argv)
{
	// M <- matrix(nrow=3,byrow=TRUE,data=c(1,0,1,0,
	//                                      1,0,1,0,
	//                                      1,0,0,1))
	// 
	// M2 <- matrix(nrow=3,byrow=TRUE,data=c(.80, .1, .72, 0,
	//                                       .80, .1, .62, 0,
	//                                       .43, .1, .00, 1))
	// 
	// > GetRewardWeights(M)
	// $FirstL
	// [1]  0.0000000  0.0000000 -0.7071068  0.7071068
	// $OldRep
	// [1] 0.3333333 0.3333333 0.3333333
	// $ThisRep
	// [1] 0.5 0.5 0.0
	// $SmoothRep
	// [1] 0.35 0.35 0.30
	// 
	// > GetRewardWeights(M, Rep=c(.2,.2,.6))
	// $FirstL
	// [1]  0.0000000  0.0000000 -0.7071068  0.7071068
	// $OldRep
	// [1] 0.2 0.2 0.6
	// $ThisRep
	// [1] 0 0 1
	// $SmoothRep
	// [1] 0.18 0.18 0.64
	// 
	// > GetRewardWeights(M2)
	// $FirstL
	// [1] -0.2934226  0.0000000 -0.5338542  0.7930340
	// $OldRep
	// [1] 0.3333333 0.3333333 0.3333333
	// $ThisRep
	// [1] 0.5105984 0.4894016 0.0000000
	// $SmoothRep
	// [1] 0.3510598 0.3489402 0.3000000
	// 
	// > GetRewardWeights(M2, Rep=c(.2,.2,.6), alpha=.5)
	// $FirstL
	// [1] -0.2935984  0.0000000 -0.5330507  0.7935092
	// $OldRep
	// [1] 0.2 0.2 0.6
	// $ThisRep
	// [1] 0.00000000 0.01362912 0.98637088
	// $SmoothRep
	// [1] 0.1000000 0.1068146 0.7931854
	tc_matrix<double> M = tc_matrix<double>(
		c<double>(12,
			1.0,  0.0,  1.0,  0.0,
			1.0,  0.0,  1.0,  0.0,
			1.0,  0.0,  0.0,  1.0), 3);

	tc_matrix<double> M2 = tc_matrix<double>(
		c<double>(12,
			0.80, 0.1,  0.72, 0.0,
			0.80, 0.1,  0.62, 0.0,
			0.43, 0.1,  0.00, 1.0), 3);
	print(GetRewardWeights(M));
	printf("\n");
	print(GetRewardWeights(M, c<double>(3, .2,.2,.6)));
	printf("\n");
	print(GetRewardWeights(M2));
	printf("\n");
	print(GetRewardWeights(M2, c<double>(3, .2,.2,.6), 0.5));
	printf("\n");

	// M <- matrix( data=c(
	//       1,    1,    0,    0,    0.5356322, 6.689658e-01,
	//       1,    0,    0,    0,    0.4574713,           NA,
	//       1,    1,    0,    0,    0.5356322, 6.689658e-01,
	//       1,    1,    1,    0,    0.5747126,           NA,
	//       0,    0,    1,    1,    1.0000000, 8.333333e-05,
	//       0,    0,    1,    1,    1.0000000, 9.999167e-01),
	//   nrow=6,byrow=TRUE)
	// 
	// > GetDecisionOutcomes(Mtemp=M, ScaledIndex=c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE))
	// [1] 0.6666667 0.5000000 0.5000000 0.3333333 0.5551724 0.6689658
	// > GetDecisionOutcomes(Mtemp=M, ScaledIndex=c(FALSE, FALSE, FALSE, FALSE, FALSE, TRUE))
	// [1] 0.6666667 0.5000000 0.5000000 0.3333333 0.6839080 0.6689658
	// > GetDecisionOutcomes(Mtemp=M, ScaledIndex=c(TRUE, FALSE, FALSE, FALSE, FALSE, FALSE), Rep=c(.2,.2,.1,.4,.04,.06))
	// [1] 1.0000000 0.7000000 0.5000000 0.1000000 0.5820690 0.6517202
	//
	tc_matrix<double> M3 = tc_matrix<double>(
		c<double>(36,
	         1.0,  1.0,  0.0,  0.0,  0.5356322, .6689658,
	         1.0,  0.0,  0.0,  0.0,  0.4574713,  (double)NA,
	         1.0,  1.0,  0.0,  0.0,  0.5356322, .6689658,
	         1.0,  1.0,  1.0,  0.0,  0.5747126,  (double)NA,
	         0.0,  0.0,  1.0,  1.0,  1.0000000, .00008333333,
	         0.0,  0.0,  1.0,  1.0,  1.0000000, .9999167), 6);
	print(GetDecisionOutcomes(M3, c<int>(6, 0, 0, 0, 0, 1, 1)));
	print(GetDecisionOutcomes(M3, c<int>(6, 0, 0, 0, 0, 0, 1) ));
	print(GetDecisionOutcomes(M3, c<int>(6, 1, 0, 0, 0, 0, 0),
								c<double>(6, .2,.2,.1,.4,.04,.06)));
	printf("\n");

	// M <- matrix( data=c(
	//       1,    1,     0,     0,    0.5356322, 6.689658e-01,
	//       1,    0,    NA,    NA,    0.4574713,           NA,
	//       1,    NA,    0,    NA,    0.5356322, 6.689658e-01,
	//       1,    1,     1,    NA,    0.5747126,           NA,
	//       0,    NA,    1,    NA,    1.0000000, 8.333333e-05,
	//       0,    0,     1,     1,    NA,        9.999167e-01),
	//   nrow=6,byrow=TRUE)
	// 
	// > FillNa(M,ScaledIndex=c(FALSE,FALSE,FALSE,FALSE,TRUE,TRUE))
	//       [,1] [,2] [,3] [,4]      [,5]         [,6]
	// [1,]    1  1.0    0  0.0 0.5356322 6.689658e-01
	// [2,]    1  0.0    1  0.5 0.4574713 6.689658e-01
	// [3,]    1  0.5    0  0.5 0.5356322 6.689658e-01
	// [4,]    1  1.0    1  0.5 0.5747126 6.689658e-01
	// [5,]    0  0.5    1  0.5 1.0000000 8.333333e-05
	// [6,]    0  0.0    1  1.0 0.5356322 9.999167e-01
	// > FillNa(M,ScaledIndex=c(FALSE,FALSE,FALSE,FALSE,FALSE,FALSE))
	//       [,1] [,2] [,3] [,4] [,5] [,6]
	// [1,]    1  1.0    0  0.0  0.5    1
	// [2,]    1  0.0    1  0.5  0.5    1
	// [3,]    1  0.5    0  0.5  0.5    1
	// [4,]    1  1.0    1  0.5  1.0    1
	// [5,]    0  0.5    1  0.5  1.0    0
	// [6,]    0  0.0    1  1.0  1.0    1

	tc_matrix<double> M4 = tc_matrix<double>(
		c<double>(36,
	         1.0,    1.0,    0.0,        0.0,      0.5356322, .6689658,
	         1.0,    0.0, (double)NA, (double)NA,  0.4574713,  (double)NA,
	         1.0,(double)NA, 0.0,     (double)NA,  0.5356322, .6689658,
	         1.0,    1.0,    1.0,     (double)NA,  0.5747126,  (double)NA,
	         0.0,(double)NA, 1.0,     (double)NA,  1.0000000, .00008333333,
	         0.0,    0.0,    1.0,        1.0,     (double)NA, .9999167), 6);
	print(FillNa(M4, c<int>(6, 0, 0, 0, 0, 1, 1)));
	printf("\n");
	print(FillNa(M4, c<int>(6, 0, 0, 0, 0, 0, 0)));
	printf("\n");

	// M1 <-  rbind(
	//   c(1,1,0,0),
	//   c(1,0,0,0),
	//   c(1,1,0,0),
	//   c(1,1,1,0),
	//   c(0,0,1,1),
	//   c(0,0,1,1))
	// 
	// row.names(M1) <- c("True", "Distort 1", "True", "Distort 2", "Liar", "Liar")
	// colnames(M1) <- c("C1.1","C2.1","C3.0","C4.0")
	//
	// > Factory(M1)
	// $Original
	//           C1.1 C2.1 C3.0 C4.0
	// True         1    1    0    0
	// Distort 1    1    0    0    0
	// True         1    1    0    0
	// Distort 2    1    1    1    0
	// Liar         0    0    1    1
	// Liar         0    0    1    1
	// 
	// $Filled
	//           C1.1 C2.1 C3.0 C4.0
	// True         1    1    0    0
	// Distort 1    1    0    0    0
	// True         1    1    0    0
	// Distort 2    1    1    1    0
	// Liar         0    0    1    1
	// Liar         0    0    1    1
	// 
	// $Agents
	//              OldRep   ThisRep SmoothRep NArow ParticipationR RelativePart  RowBonus
	// True      0.1666667 0.2823757 0.1782376     0              1    0.1666667 0.1782376
	// Distort 1 0.1666667 0.2176243 0.1717624     0              1    0.1666667 0.1717624
	// True      0.1666667 0.2823757 0.1782376     0              1    0.1666667 0.1782376
	// Distort 2 0.1666667 0.2176243 0.1717624     0              1    0.1666667 0.1717624
	// Liar      0.1666667 0.0000000 0.1500000     0              1    0.1666667 0.1500000
	// Liar      0.1666667 0.0000000 0.1500000     0              1    0.1666667 0.1500000
	// 
	// $Decisions
	//                             C1.1       C2.1      C3.0      C4.0
	// First Loading         -0.5395366 -0.4570561 0.4570561 0.5395366
	// DecisionOutcomes.Raw   0.7000000  0.5282376 0.4717624 0.3000000
	// Consensus Reward       0.5000000  0.0000000 0.0000000 0.5000000
	// Certainty              0.7000000  0.0000000 0.0000000 0.7000000
	// NAs Filled             0.0000000  0.0000000 0.0000000 0.0000000
	// ParticipationC         1.0000000  1.0000000 1.0000000 1.0000000
	// Author Bonus           0.5000000  0.0000000 0.0000000 0.5000000
	// DecisionOutcome.Final  1.0000000  0.5000000 0.5000000 0.0000000
	// 
	// $Participation
	// [1] 1
	// 
	// $Certainty
	// [1] 0.35
	// 
	// 
	// MS <- matrix( data=c(
	//       1,    1,    0,    0,    233,   16027.59,
	//       1,    0,    0,    0,    199,         NA,
	//       1,    1,    0,    0,    233,   16027.59,
	//       1,    1,    1,    0,    250,         NA,
	//       0,    0,    1,    1,    435,    8001.00,
	//       0,    0,    1,    1,    435,   19999.00),
	//   nrow=6,byrow=TRUE)
	// 
	// Scales <- matrix( c( rep(FALSE,ncol(MS)),
	//                      rep(0,ncol(MS)),
	//                      rep(1,ncol(MS))), 3, byrow=TRUE, dimnames=list(c("Scaled","Min","Max"),colnames(MS2)) )
	// 
	// Scales["Scaled",5] <- 1
	// Scales["Max",5] <- 435
	// Scales["Scaled",6] <- 1
	// Scales["Min",6] <- 8000
	// Scales["Max",6] <- 20000
	// 
	// > Factory(M0=MS,Scales=Scales)
	// $Original
	//      [,1] [,2] [,3] [,4] [,5]     [,6]
	// [1,]    1    1    0    0  233 16027.59
	// [2,]    1    0    0    0  199       NA
	// [3,]    1    1    0    0  233 16027.59
	// [4,]    1    1    1    0  250       NA
	// [5,]    0    0    1    1  435  8001.00
	// [6,]    0    0    1    1  435 19999.00
	// 
	// $Filled
	//      [,1] [,2] [,3] [,4]      [,5]         [,6]
	// [1,]    1    1    0    0 0.5356322 6.689658e-01
	// [2,]    1    0    0    0 0.4574713 6.689658e-01
	// [3,]    1    1    0    0 0.5356322 6.689658e-01
	// [4,]    1    1    1    0 0.5747126 6.689658e-01
	// [5,]    0    0    1    1 1.0000000 8.333333e-05
	// [6,]    0    0    1    1 1.0000000 9.999167e-01
	// 
	// $Agents
	//         OldRep    ThisRep SmoothRep NArow ParticipationR RelativePart  RowBonus
	// [1,] 0.1666667 0.27512698 0.1775127     0      1.0000000    0.1764706 0.1774530
	// [2,] 0.1666667 0.22080941 0.1720809     1      0.8333333    0.1470588 0.1706477
	// [3,] 0.1666667 0.27512698 0.1775127     0      1.0000000    0.1764706 0.1774530
	// [4,] 0.1666667 0.21600171 0.1716002     1      0.8333333    0.1470588 0.1701944
	// [5,] 0.1666667 0.00000000 0.1500000     0      1.0000000    0.1764706 0.1515162
	// [6,] 0.1666667 0.01293492 0.1512935     0      1.0000000    0.1764706 0.1527356
	// 
	// $Decisions
	//                             [,1]        [,2]       [,3]      [,4]        [,5]          [,6]
	// First Loading         -0.5223889 -0.43411264 0.44195128 0.5223889   0.2463368 -9.880889e-02
	// DecisionOutcomes.Raw   0.6987065  0.52662557 0.47289366 0.3012935   0.5356322  6.689658e-01
	// Consensus Reward       0.2850531  0.00000000 0.00000000 0.2850531   0.1448406  2.850531e-01
	// Certainty              0.6987065  0.00000000 0.00000000 0.6987065   0.3550254  6.987065e-01
	// NAs Filled             0.0000000  0.00000000 0.00000000 0.0000000   0.0000000  2.000000e+00
	// ParticipationC         1.0000000  1.00000000 1.00000000 1.0000000   1.0000000  6.563189e-01
	// Author Bonus           0.2788520  0.01012676 0.01012676 0.2788520   0.1466709  2.753716e-01
	// DecisionOutcome.Final  1.0000000  0.50000000 0.50000000 0.0000000 233.0000000  1.602759e+04
	// 
	// $Participation
	// [1] 0.9427198
	// 
	// $Certainty
	// [1] 0.4085242
	// 
	// 
	// > Factory(M0=MS,Scales=Scales,Rep=c(.05,.05,.05,.05,.10,.70))
	// $Original
	//      [,1] [,2] [,3] [,4] [,5]     [,6]
	// [1,]    1    1    0    0  233 16027.59
	// [2,]    1    0    0    0  199       NA
	// [3,]    1    1    0    0  233 16027.59
	// [4,]    1    1    1    0  250       NA
	// [5,]    0    0    1    1  435  8001.00
	// [6,]    0    0    1    1  435 19999.00
	// $Filled
	//      [,1] [,2] [,3] [,4]      [,5]         [,6]
	// [1,]    1    1    0    0 0.5356322 6.689658e-01
	// [2,]    1    0    0    0 0.4574713 9.999167e-01
	// [3,]    1    1    0    0 0.5356322 6.689658e-01
	// [4,]    1    1    1    0 0.5747126 9.999167e-01
	// [5,]    0    0    1    1 1.0000000 8.333333e-05
	// [6,]    0    0    1    1 1.0000000 9.999167e-01
	// $Agents
	//      OldRep    ThisRep  SmoothRep NArow ParticipationR RelativePart   RowBonus
	// [1,]   0.05 0.00000000 0.04500000     0      1.0000000    0.1764706 0.04702833
	// [2,]   0.05 0.01235137 0.04623514     1      0.8333333    0.1470588 0.04779064
	// [3,]   0.05 0.00000000 0.04500000     0      1.0000000    0.1764706 0.04702833
	// [4,]   0.05 0.01332745 0.04633275     1      0.8333333    0.1470588 0.04788674
	// [5,]   0.10 0.11962886 0.10196289     0      1.0000000    0.1764706 0.10311239
	// [6,]   0.70 0.85469232 0.71546923     0      1.0000000    0.1764706 0.70715357
	// $Decisions
	//                             [,1]       [,2]      [,3]      [,4]        [,5]         [,6]
	// First Loading         -0.5369880 -0.4210132 0.4240200 0.5369880   0.2540098 4.149213e-02
	// DecisionOutcomes.Raw   0.1825679  0.1363327 0.8637649 0.8174321   1.0000000 9.999167e-01
	// Consensus Reward       0.1638874  0.1731571 0.1731767 0.1638874   0.1638874 1.620038e-01
	// Certainty              0.8174321  0.8636673 0.8637649 0.8174321   0.8174321 8.080371e-01
	// NAs Filled             0.0000000  0.0000000 0.0000000 0.0000000   0.0000000 2.000000e+00
	// ParticipationC         1.0000000  1.0000000 1.0000000 1.0000000   1.0000000 9.074321e-01
	// Author Bonus           0.1639706  0.1730973 0.1731166 0.1639706   0.1639706 1.618743e-01
	// DecisionOutcome.Final  0.0000000  0.0000000 1.0000000 1.0000000 435.0000000 1.999900e+04
	// $Participation
	// [1] 0.984572
	// $Certainty
	// [1] 0.8312943
	// 
	tc_matrix<double> M1 = tc_matrix<double>(
		c<double>(24,
	         1.0, 1.0, 0.0, 0.0,
	         1.0, 0.0, 0.0, 0.0,
	         1.0, 1.0, 0.0, 0.0,
	         1.0, 1.0, 1.0, 0.0,
	         0.0, 0.0, 1.0, 1.0,
	         0.0, 0.0, 1.0, 1.0), 6);
	print(Factory(M1));
	printf("\n");

	tc_matrix<double> MS = tc_matrix<double>(
		c<double>(36,
	         1.0, 1.0, 0.0, 0.0, 233.0, 16027.59,
	         1.0, 0.0, 0.0, 0.0, 199.0, (double)NA,
	         1.0, 1.0, 0.0, 0.0, 233.0, 16027.59, 
	         1.0, 1.0, 1.0, 0.0, 250.0, (double)NA,
	         0.0, 0.0, 1.0, 1.0, 435.0, 8001.00,
	         0.0, 0.0, 1.0, 1.0, 435.0, 19999.00), 6);
	tc_matrix<double> Scales = tc_matrix<double>(
		c<double>(18, 
			0.0, 0.0, 0.0, 0.0,   1.0,     1.0, 
			0.0, 0.0, 0.0, 0.0,   0.0,  8000.0, 
			1.0, 1.0, 1.0, 1.0, 435.0, 20000.0), 3);
	print(Factory(MS, Scales));
	printf("\n");

	tc_vector<double> Rep = c<double>(6, .05,.05,.05,.05,.10,.70);
	print(Factory(MS, Scales, Rep));
	printf("\n");

	return 0;
}

